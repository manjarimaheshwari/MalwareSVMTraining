import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Preprocessing {
	// N = 17
	public static final String REMAINDER = "Q";

	public String[] get_samples(String directory) {
		String[] malwareFiles = new String[1000];
		List<Path> collectPaths = collectFilePaths(directory);
		for (int i = 0; i < 1000; i++) {
			malwareFiles[i] = collectPaths.get(i).getFileName().toString();
		}
		return malwareFiles;
	}

	// for each family, count the number of occurrences for each opcode
	public HashMap<String, Integer> opcode_occurrences(String directory, String[] malwareFiles) {
		HashMap<String, Integer> num_opcode = new HashMap<String, Integer>();
		for (int i = 0; i < 1000; i++) {
			try {
				File myObj = new File(directory + "\\" + malwareFiles[i]);
				Scanner myReader = new Scanner(myObj);
				while (myReader.hasNextLine()) {
					String data = myReader.nextLine();
					num_opcode.put(data, num_opcode.containsKey(data) ? (num_opcode.get(data) + 1) : 1);
				}
				myReader.close();
			} catch (FileNotFoundException e) {
				System.out.println("An error occurred.");
				e.printStackTrace();
			}
		}
		return sort(num_opcode);
	}

	// sort opcodes in descending order of values
	public HashMap<String, Integer> sort(HashMap<String, Integer> num_opcode) {
		LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
		num_opcode.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));

		return sortedMap;
	}

	// copy file over and replace the opcodes with given symbols
	public void copy_replace(String source, String destination, String[] malwareFiles,
			HashMap<String, String> replacementOpcodes) {
		Scanner myReader = null;
		FileWriter writer = null;
		for (int i = 0; i < 1000; i++) {
			try {
				String sourcePath = source + "\\" + malwareFiles[i];
				String destPath = destination + "\\" + "REPLACED_" + malwareFiles[i];
				copy(sourcePath, destPath);
				File replaced_file = new File(destPath);
				String oldContent = "";
				String newContent = "";
				myReader = new Scanner(replaced_file);
				while (myReader.hasNextLine()) {
					String data = myReader.nextLine();
					oldContent = oldContent + data;
					if (replacementOpcodes.containsKey(data)) {
						data = data.replace(data, replacementOpcodes.get(data));
						newContent = newContent + data;
					} else {
						data = data.replace(data, REMAINDER);
						newContent = newContent + data;
					}
				}
				newContent = oldContent.replaceAll(oldContent, newContent);
				writer = new FileWriter(replaced_file);
				writer.write(newContent);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				try {
					myReader.close();
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public void copy(String sourcePath, String destinationPath) throws IOException {
		Files.copy(Paths.get(sourcePath), new FileOutputStream(destinationPath));
	}

	public String[] splittingData(String directory) {
		String[] modelDataSet = new String[328];
		List<Path> filePaths = collectFilePaths(directory);
		System.out.println(filePaths.get(830));
		String trainingSet1 = "";
		String trainingSet2 = ""; 
		String trainingSet3 = ""; 
		String[] testSet = new String[100]; //100 files for testing
		String[] vectorTestFiles = new String[225]; 
		for (int i = 0; i < 1000; i++) {
			try {
				File myObj = new File(filePaths.get(i).toString());
				Scanner myReader = new Scanner(myObj);
				while (myReader.hasNextLine()) {
					String data = myReader.nextLine();
					if (i < 225) 
						trainingSet1 = trainingSet1 + data;
					else if (i >= 225 && i < 450)
						trainingSet2 = trainingSet2 + data; 
					else if (i >= 450 && i < 675)
						trainingSet3 = trainingSet3 + data; 
					else if (i >= 675 && i < 900)
						vectorTestFiles[i - 675] = filePaths.get(i).toString(); 
					else {
						testSet[i - 900] = filePaths.get(i).toString();
						//System.out.println("testSet " + i + ": " + testSet[i-900]);
					}					
				}
				myReader.close();
			} catch (FileNotFoundException e) {
				System.out.println("An error occurred.");
				e.printStackTrace();
			}
		}
		//modelDataSet[0] = training observation
		//modelDataSet[REMAINING] = fileNames for testing
		modelDataSet[0] = trainingSet1.substring(0, 50000);
		modelDataSet[1] = trainingSet2.substring(0, 50000);
		modelDataSet[2] = trainingSet3.substring(0, 50000);
		//System.out.println(vectorTestFiles[155]);
		for (int i = 3; i < 228; i++) {
			modelDataSet[i] = vectorTestFiles[i-3];
		}
		//System.out.println(modelDataSet[158]);
		for (int i = 228; i < 328; i++) {
			modelDataSet[i] = testSet[i - 228];
			//System.out.println("modelDataSet " + i + ": " + modelDataSet[i]);
		}
		return modelDataSet;
	}
	/*
	public String[] ZAsplittingData(String directory) {
		String[] modelDataSet = new String[101];
		List<Path> filePaths = collectFilePaths(directory);
		String trainingSet = "";
		String[] testSet = new String[100];
		for (int i = 0; i < 1000; i++) {
			try {
				File myObj = new File(filePaths.get(i).toString());
				Scanner myReader = new Scanner(myObj);
				while (myReader.hasNextLine()) {
					String data = myReader.nextLine();
					if (i < 900)
						trainingSet = trainingSet + data;
					else
						testSet[i - 900] = filePaths.get(i).toString();
				}
				myReader.close();
			} catch (FileNotFoundException e) {
				System.out.println("An error occurred.");
				e.printStackTrace();
			}
		}
		modelDataSet[0] = trainingSet.substring(150000, 200000);
		for (int i = 0; i < 100; i++) {
			modelDataSet[i + 1] = testSet[i];
		}
		return modelDataSet;
	}
	*/ 
	
	public List<Path> collectFilePaths(String directory) {
		Path logFolder = Paths.get(directory);
		int maxFiles = 1000;
		List<Path> collectPaths = null;
		try {
			collectPaths = Files.walk(logFolder).filter(p -> Files.isRegularFile(p)).limit(maxFiles)
					.collect(Collectors.toList());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return collectPaths;
	}

	// WWS Processing
	public String[] WWSData() {
		String WWS_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\winwebsec";
		String[] WWS_samples = get_samples(WWS_dir);
		// HashMap<String, Integer> WWS_opcode_dict = opcode_occurrences(WWS_dir,
		// WWS_samples);
		// System.out.println(WWS_opcode_dict);
		String replace_WWS_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\replace_WWS";
		HashMap<String, String> WWS_OPCODE = new HashMap<String, String>() {
			{
				put("mov", "A");
				put("push", "B");
				put("call", "C");
				put("cmp", "D");
				put("pop", "E");
				put("jz", "F");
				put("jnz", "G");
				put("add", "H");
				put("test", "I");
				put("lea", "J");
				put("jmp", "K");
				put("retn", "L");
				put("xor", "M");
				put("and", "N");
				put("inc", "O");
				put("sub", "P");
			};
		};
		copy_replace(WWS_dir, replace_WWS_dir, WWS_samples, WWS_OPCODE);
		String[] WWS_modelData = splittingData(replace_WWS_dir);
		return WWS_modelData;
		// System.out.println(WWS_modelData[1]);
	}

	public String[] ZbotData() {
		// Zbot
		String zbot_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\zbot";
		String[] zbot_samples = get_samples(zbot_dir);
		// HashMap<String, Integer> zbot_opcode_dict = opcode_occurrences(zbot_dir,
		// zbot_samples);
		// System.out.println(zbot_opcode_dict);
		String replace_zbot_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\replace_zbot";
		HashMap<String, String> ZBOT_OPCODE = new HashMap<String, String>() {
			{
				put("mov", "A");
				put("push", "B");
				put("call", "C");
				put("cmp", "D");
				put("pop", "E");
				put("jz", "F");
				put("jnz", "G");
				put("add", "H");
				put("test", "I");
				put("lea", "J");
				put("jmp", "K");
				put("retn", "L");
				put("xor", "M");
				put("and", "N");
				put("inc", "O");
				put("sub", "P");
			};
		};
		copy_replace(zbot_dir, replace_zbot_dir, zbot_samples, ZBOT_OPCODE);
		String[] zbot_modelData = splittingData(replace_zbot_dir);
		return zbot_modelData;
	}

	public String[] ZAData() {
		String ZA_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\zeroaccess";
		String[] ZA_samples = get_samples(ZA_dir);
		// HashMap<String, Integer> ZA_opcode_dict = opcode_occurrences(ZA_dir,
		// ZA_samples);
		// System.out.println(ZA_opcode_dict);
		String replace_ZA_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\replace_za";
		HashMap<String, String> ZA_OPCODE = new HashMap<String, String>() {
			{
				put("mov", "A");
				put("push", "B");
				put("call", "C");
				put("cmp", "D");
				put("pop", "E");
				put("jz", "F");
				put("jnz", "G");
				put("add", "H");
				put("test", "I");
				put("lea", "J");
				put("jmp", "K");
				put("retn", "L");
				put("xor", "M");
				put("and", "N");
				put("inc", "O");
				put("sub", "P");
			};
		};
		copy_replace(ZA_dir, replace_ZA_dir, ZA_samples, ZA_OPCODE);
		String[] ZA_modelData = splittingData(replace_ZA_dir);
		//System.out.println("ZA: " + ZA_modelData[158]);
		return ZA_modelData;
	}

	public static void main(String[] args) {
		// N = 17 for all 3 families
		Preprocessing p = new Preprocessing();
		p.ZAData();
		//String ZA_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\zeroaccess";
		//String[] ZA_samples = p.get_samples(ZA_dir);
		// HashMap<String, Integer> ZA_opcode_dict = opcode_occurrences(ZA_dir,
		// ZA_samples);
		// System.out.println(ZA_opcode_dict);
		//String replace_ZA_dir = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Midterm 2\\Malware files\\replace_za";
		/* HashMap<String, String> ZA_OPCODE = new HashMap<String, String>() {
			{
				put("mov", "A");
				put("push", "B");
				put("call", "C");
				put("cmp", "D");
				put("pop", "E");
				put("jz", "F");
				put("jnz", "G");
				put("add", "H");
				put("test", "I");
				put("lea", "J");
				put("jmp", "K");
				put("retn", "L");
				put("xor", "M");
				put("and", "N");
				put("inc", "O");
				put("sub", "P");
			};
		};
		p.copy_replace(ZA_dir, replace_ZA_dir, ZA_samples, ZA_OPCODE);
		String[] ZA_modelData = p.splittingData(replace_ZA_dir);
		for (String s : ZA_modelData)
			System.out.println(s);
	*/
	}
	
}
