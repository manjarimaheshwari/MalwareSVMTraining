import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Scanner;

public class CreateSVMModels extends Scoring {

	public double[][][] WWS_SVM;
	public static String[] WWS_modelData = new Preprocessing().WWSData();
	public static String[] Zbot_modelData = new Preprocessing().ZbotData();
	public static String[] ZA_modelData = new Preprocessing().ZAData();
	public static final double RANGE_PERCENTAGE = 0.1;

	public double[] pi;
	public double[][] A;
	public double[][] B;

	public void initialize(int N, int M, double rangePercentage) {
		double range;
		range = 1.0 / N * rangePercentage;
		A = initializeMatrix(N, N, range);
		pi = initializeVector(N, range);

		range = 1.0 / M * rangePercentage;
		B = initializeMatrix(N, M, range);
	}

	public double[][] initializeMatrix(int rows, int columns, double range) {
		double[][] matrix = new double[rows][columns];
		for (int i = 0; i < rows; i++) {
			matrix[i] = initializeVector(columns, range);
		}
		return matrix;
	}

	public double[] initializeVector(int columns, double range) {
		double[] vector = new double[columns];
		double rowSum = 0;

		for (int j = 0; j < columns; j++) {
			vector[j] = 1.0 / columns;
			double amountToAdd = Math.random() * range;
			if (Math.random() < 0.5)
				vector[j] += amountToAdd;
			else
				vector[j] -= amountToAdd;
			rowSum += vector[j];
		}
		for (int j = 0; j < columns; j++) {
			vector[j] /= rowSum;
		}
		return vector;
	}

	// instead of hardcoding the pi, A, B use Fabio's lambda class to make
	// randomizing easier!!
	public HMM_Model createHMMModel(int N, int M, int indexNum, String[] modelData) {
		// num = which obs sequence to use (50,000 char out of x set of 225 files)
		// index 0 for first 225 files
		initialize(N, M, RANGE_PERCENTAGE);
		int[] O = defineTrainingO(modelData, indexNum);
		HMM_Model model = new HMM_Model(pi, A, B, O);
		model.alpha_pass();
		return model;
	}

	// create feature vectors
	public double[][] createfeatureVector(HMM_Model model1, HMM_Model model2, HMM_Model model3, 
			String[] modelData, int startIndex, int endIndex, double labelNum, int obsStringLength) 
	{
		//System.out.println("ModelData: " + modelData[155]);
		String[] HMMScoringFiles = gatherHMMScoringFiles(modelData, startIndex, endIndex);
		int num = endIndex - startIndex; 
		//System.out.println(HMMScoringFiles[155]);
		double[] scores1 = calculateScores(model1, HMMScoringFiles, obsStringLength);
		double[] scores2 = calculateScores(model2, HMMScoringFiles, obsStringLength);
		double[] scores3 = calculateScores(model3, HMMScoringFiles, obsStringLength);
		double[][] featureVector = new double[num][4];

		for (int i = 0; i < num; i++) {
			featureVector[i][0] = labelNum; // label for which family 
			featureVector[i][1] = scores1[i];
			//System.out.println("i: " + i + "WWS_SVM: " + featureVector[i][0]);
			featureVector[i][2] = scores2[i];
			//System.out.println("i: " + i + "WWS_SVM: " + featureVector[i][1]);
			featureVector[i][3] = scores3[i];
			//System.out.println("i: " + i + "WWS_SVM: " + featureVector[i][2]);
		}
		return featureVector; 
	}
	
	public void createDataSets() {
		
		HMM_Model WWS_model1 = createHMMModel(2, 17, 0, WWS_modelData);
		HMM_Model WWS_model2 = createHMMModel(2, 17, 1, WWS_modelData);
		HMM_Model WWS_model3 = createHMMModel(2, 17, 2, WWS_modelData);
		// for wws vs the others training
		double[][] WWS_featureVector = createfeatureVector(WWS_model1, WWS_model2, WWS_model3, WWS_modelData, 3, 228, 1, 50000); 
		convertToFile(WWS_featureVector, "WWSvsZbot"); 
		convertToFile(WWS_featureVector, "WWSvsZA");
		//System.out.println("modelData: 228" + WWS_modelData[228]);
		// for wws vs the others testing 
		double[][] WWS_testing = createfeatureVector(WWS_model1, WWS_model2, WWS_model3, WWS_modelData, 228, 328, 1, 50000); 
		convertToFile(WWS_testing, "WWSvsZbotTesting"); 
		convertToFile(WWS_testing, "WWSvsZATesting"); 
		// for zbot vs wws training
		double[][] vsWWSfeatureVector = createfeatureVector(WWS_model1, WWS_model2, WWS_model3, WWS_modelData, 3, 228, -1, 50000); 
		convertToFile(vsWWSfeatureVector, "ZbotvsWWS"); 
		convertToFile(vsWWSfeatureVector, "ZAvsWWS"); 
		// for zbot vs wws testing
		double[][] vsWWStesting = createfeatureVector(WWS_model1, WWS_model2, WWS_model3, WWS_modelData, 228, 328, -1, 50000); 
		convertToFile(vsWWStesting, "ZbotvsWWSTesting"); 
		convertToFile(vsWWStesting, "ZAvsWWSTesting");
		
		
		HMM_Model Zbot_model1 = createHMMModel(2, 17, 0, Zbot_modelData);
		HMM_Model Zbot_model2 = createHMMModel(2, 17, 1, Zbot_modelData);
		HMM_Model Zbot_model3 = createHMMModel(2, 17, 2, Zbot_modelData);
		// for wws vs zbot and za vs zbot training
		double[][] vsZbotfeatureVector = createfeatureVector(Zbot_model1, Zbot_model2, Zbot_model3, Zbot_modelData, 3, 228, -1, 50000); 
		convertToFile(vsZbotfeatureVector, "WWSvsZbot"); 
		convertToFile(vsZbotfeatureVector, "ZAvsZbot");
		// for wws vs zbot and za vs zbot testing 
		double[][] vsZbotTesting = createfeatureVector(Zbot_model1, Zbot_model2, Zbot_model3, Zbot_modelData, 228, 328, -1, 50000); 
		convertToFile(vsZbotTesting, "WWSvsZbotTesting"); 
		convertToFile(vsZbotTesting, "ZAvsZbotTesting"); 
		//for training zbot vs. wws & zbot vs za
		double[][] Zbot_featureVector = createfeatureVector(Zbot_model1, Zbot_model2, Zbot_model3, Zbot_modelData, 3, 228, 1, 50000);
		convertToFile(Zbot_featureVector, "ZbotvsWWS"); 
		convertToFile(Zbot_featureVector, "ZbotvsZA"); 
		//for testing zbot vs wws & zbot vs za 
		double[][] Zbot_Testing = createfeatureVector(Zbot_model1, Zbot_model2, Zbot_model3, Zbot_modelData, 228, 328, 1, 50000); 
		convertToFile(Zbot_Testing, "ZbotvsWWSTesting"); 
		convertToFile(Zbot_Testing, "ZbotvsZATesting"); 
		
		HMM_Model ZA_model1 = createHMMModel(2, 17, 0, ZA_modelData);
		HMM_Model ZA_model2 = createHMMModel(2, 17, 1, ZA_modelData);
		HMM_Model ZA_model3 = createHMMModel(2, 17, 2, ZA_modelData);
		// for ZA vs the others -- training 
		double[][] ZA_featureVector = createfeatureVector(ZA_model1, ZA_model2, ZA_model3, ZA_modelData, 3, 228, 1, 50000);
		convertToFile(ZA_featureVector, "ZAvsWWS");
		convertToFile(ZA_featureVector, "ZAvsZbot");
		//for ZA vs the others testing 
		double[][] ZA_testing = createfeatureVector(ZA_model1, ZA_model2, ZA_model3, ZA_modelData, 228, 328, 1, 50000); 
		convertToFile(ZA_testing, "ZAvsWWSTesting");
		convertToFile(ZA_testing, "ZAvsZbotTesting");
		// for training wws vs za and zbot vs za 
		double[][] vsZAfeatureVector = createfeatureVector(ZA_model1, ZA_model2, ZA_model3, ZA_modelData, 3, 228, -1, 50000);
		convertToFile(vsZAfeatureVector, "WWSvsZA");
		convertToFile(vsZAfeatureVector, "ZbotvsZA");
		double[][] vsZAtesting = createfeatureVector(ZA_model1, ZA_model2, ZA_model3, ZA_modelData, 228, 328, -1, 50000); 
		convertToFile(vsZAtesting, "WWSvsZATesting");
		convertToFile(vsZAtesting, "ZbotvsZATesting");
		
		
	}
 /*
	public void convertScoreArrayToSVMDataSet(double[][] featureVector, String filename) {
		File file = new File("C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Final\\" + filename + ".txt");
		Scanner stdIn = new Scanner(System.in);
		PrintWriter writer = null;
		try {
			if (!file.exists())
				file.createNewFile();
			writer = new PrintWriter(stdIn.nextLine());
			for (int i = 0; i < featureVector.length; i++) // num rows = 225
			{
				for (int j = 0; j < featureVector[0].length; j++) { // num cols = 4 {
					writer.print(featureVector[i][j]);
				}
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (writer != null)
					writer.close();
			} catch (Exception e) {
				System.out.println("Could not close Writer");
			}
		}
	}
	*/ 
	public void convertToFile(double[][] featureVector, String fileName) {
		String file = "C:\\Users\\manja\\Google Drive\\SJSU\\Year 4\\CS 185C\\Final\\libsvm-3.24\\windows\\" + fileName + ".txt";
		try { 
			PrintStream output = new PrintStream(new FileOutputStream(file, true));
			for (int i = 0; i < featureVector.length; i++) {
                String s= "";
                for (int j = 0; j < featureVector[i].length; j++) {
                    if (j == 0) 
                    	s+= featureVector[i][j] + " ";
                    else if (j == 1) {
                    	s+= "1:" + featureVector[i][j] + " "; 
                    }
                    else if (j == 2) {
                    	s+= "2:" + featureVector[i][j] + " "; 
                    }
                    else {
                    	s+= "3:" + featureVector[i][j] + " "; 
                    }
                    
                }
                output.println(s);
            }
            output.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
	}
	public static void main(String[] args) {
		CreateSVMModels p = new CreateSVMModels();
		//System.out.println("LENGTH: " + p.ZA_modelData.length);
		//System.out.println(p.ZA_modelData[158]);
		//for (int i = 0; i < p.WWS_modelData.length; i++)
		//{
			//System.out.println(i + ": " + WWS_modelData[i]);
		//}
		p.createDataSets();
	}
}
